#!/bin/sh

DIR="$(realpath "$(dirname "$0" )" )"
cd "$DIR" || exit 1

# You MUST make sure that we are in a correct environment.
test -z "$INOSENV" && {
  echo "You cannot run this script while not in the juniosenv!" && \
  exit 1;
}

VERSION="14.2.0"
BASEURL="https://mirror.marwan.ma/gcc/releases/gcc-$VERSION"
SRCDIR="gcc-$VERSION"
TARBALL="$SRCDIR.tar.xz"

BUILDDIR="builddir"

download() {
  cd "$DIR" || exit 1
  echo "downloading gcc source..."
  if test -f "$TARBALL"; then
    echo "$TARBALL exists, skipping..."
    return
  fi

  curl -LOf $BASEURL/$TARBALL
}

extract() {
  cd "$DIR" || exit 1
  echo "extracting gcc source..."
  if ! test -f "$TARBALL"; then
    echo "No tarball to operate on!"
    exit 1
  fi

  tar xf "$TARBALL" || exit 1
  mkdir -p "$BUILDDIR" && cd "$BUILDDIR" || exit 1

  # This gcc will be used when we are actually booted into our system.
  # Therefore, its sysroot must be set to /
  "$DIR/$SRCDIR/configure" \
    --prefix="/usr" \
    --target="$TARGET" \
    --disable-fixed-point \
    --disable-libquadmath \
    --disable-decimal-float \
    --enable-default-pie \
    --enable-default-ssp \
    --program-prefix= \
    LDFLAGS_FOR_TARGET="-L$PWD/$TARGET/libgcc"\
    --disable-nls \
    --with-sysroot=/ \
    --with-build-sysroot="$ROOTFS" \
    --enable-libatomic \
    --enable-languages=c,c++ \
    --disable-bootstrap \
    --disable-assembly \
    --disable-werror \
    --disable-multilib \
    --disable-lto \
    --enable-tls \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-gnu-indirect-function \
    --disable-libmpx \
    --enable-shared \
    --enable-static \
    --enable-initfini-array \
    --enable-libstdcxx-time=rt \
    CFLAGS="$CFLAGS -fPIC"\
    CXXFLAGS="$CXXFLAGS -fPIC"\
    || exit 1
}

makeinstall() {
  echo "building gcc..."
  if ! test -d "$DIR/$BUILDDIR" -a -d "$DIR/$SRCDIR"; then
    echo "No source directory to operate on!"
    exit 1
  fi
  cd "$DIR/$BUILDDIR" || exit 1

  #make -j1 || exit 1
  make -j${JOBS:-8} all-gcc || exit 1
  make DESTDIR=$ROOTFS install-gcc || exit 1
}

clear() {
  cd "$DIR" || exit 1
  rm -rf ./*.tgz ./*.tar.xz ./*.tar.bz2 ./*.tar.gz "$SRCDIR" "$TARBALL" "$BUILDDIR"
}

cd "$DIR" || exit 1
case "$1" in
  download|d)
    download
    ;;
  extract|e)
    extract
    ;;
  makeinstall|mi)
    makeinstall
    ;;
  clear|clean|c)
    clear
    ;;
  all|a)
    download && extract && makeinstall
    ;;
  *)
    cat <<EOF
Build script for gcc

download|d -> download the tarball
extract|e -> extract and patch the tarball
makeinstall|mi -> make and install the build artifacts
clear|clean|c -> clean all artifacts
all|a -> clean, and then go through everything.
EOF
    exit 1
    ;;
esac
