#!/bin/sh

set -eu

DIR="$(realpath "$(dirname "$0" )" )"
cd "$DIR"

# You MUST make sure that we are in a correct environment.
test -z "$INOSENV" && \
  echo "You cannot run this script while not in the mimuxenv!" && \
  exit 1

SRCDIR="$TARGET-native"
TARBALL="$SRCDIR.tgz"

download() {
  cd "$DIR"
  echo "downloading musl-cross-make toolchain..."
  if test -f "$TARBALL"; then
    return
  fi
  curl -LOf "https://dev.mit.junic.kim/cross/$(uname -m)/$TARBALL"
}

extract() {
  cd "$DIR"
  if ! test -f "$TARBALL"; then
    echo "no archive found"
    exit 1
  fi
  echo "extracting pre-built musl too"
  tar -xzf "$TARBALL"
}

makeinstall() {
  echo "linking up cross toolchain..."
  if ! test -d "$DIR/$SRCDIR"; then
    echo "No source directory to operate on!"
    exit 1
  fi
  cd "$DIR/$SRCDIR/bin"
  for tool in gcc gcc-ar gcc-nm gcc-ranlib ld nm objcopy objdump ranlib readelf\
    size strings strip ar as cpp c++ g++; do
    ln -sf "$TARGET-$tool" $tool
  done
  ln -sf "$TARGET-gcc" cc
}

clear() {
  cd "$DIR"
  rm -rf ./*.tgz "$TARBALL" "$SRCDIR"
}

cd "$DIR"
case "$1" in
  download|d)
    download
    ;;
  extract|e)
    extract
    ;;
  makeinstall|mi)
    makeinstall
    ;;
  clear|clean|c)
    clear
    ;;
  all|a)
    download && extract && makeinstall
    ;;
  *)
    cat <<EOF
Build script for musl-cross-make on macos

download|d -> download the tarball
extract|e -> extract and patch the tarball
makeinstall|mi -> make and install the tarball into ../gcc
clear|clean|c -> clean everything except the tarballs (prevent extra downloads)
all|a -> go through the entire build process.
EOF
    exit 1
    ;;
esac
