#!/bin/sh

set -eu

DIR="$(realpath "$(dirname "$0" )" )"
cd "$DIR"

# You MUST make sure that we are in a correct environment.
test -z "$INOSENV" && \
  echo "You cannot run this script while not in the mimuxenv!" && \
  exit 1

# FORCE using the build system's compiler. Kernel compilation has some build
# dependencies that are not necessary for actual runtime (duh)
export PATH=/bin:/usr/bin:/usr/local/bin:/usr/sbin:/sbin
CC="$(command -v gcc)"
unset CFLAGS LDFLAGS CPPFLAGS
export CFLAGS LDFLAGS CPPFLAGS CC

VERSION="6.16.8"
BASEURL="cdn.kernel.org/pub/linux/kernel/v$(echo "$VERSION" | cut -d'.' -f 1 ).x"
SRCDIR="linux-$VERSION"
TARBALL="$SRCDIR.tar.xz"

download() {
  cd "$DIR"
  if test -f "$TARBALL"; then
    echo "$TARBALL exists, skipping..."
    return
  fi
  echo "downloading kernel source"
  curl -LOf "$BASEURL/$TARBALL"
}

# this script involves injecting a logo into the mimux tree. To get the ascii
# ppm logo from a jpeg, you need netpbm and imagemagick.

# convert cat.jpg -resize 80x80 -colors 224 /tmp/cat.ppm
# pnmnoraw /tmp/cat.ppm > ./cat.ppm

extract() {
  cd "$DIR"
  echo "extracting kernel source and applying config..."
  if ! test -f "$TARBALL"; then
    echo "$TARBALL does not exist!!"
    exit 1
  fi
  tar xf "$TARBALL"
  # config that is slimmed down and reduces used modules
  cp -p "./configs/nomodules.config" "$SRCDIR/.config"
  cd "$DIR/$SRCDIR"
  # pnmtologo script
  gcc "$DIR/pnmtologo.c" -o "$DIR/$SRCDIR/pnmtologo"
  cp "$DIR/cat.ppm" drivers/video/logo/logo_linux_clut224.ppm
  "$DIR/$SRCDIR/pnmtologo" -t clut224 "$DIR/cat.ppm" > "$DIR/$SRCDIR/drivers/video/logo/logo_linux_clut224.c"
  #"$DIR/$SRCDIR/pnmtologo" -t clut224 "$DIR/cat.ppm" > "$DIR/modified_logo.c"
}


makeinstall() {
  cd "$DIR"
  ! test -e "$SRCDIR" && { echo "You must have $SRCDIR prepared first!" && exit 1; }
  echo "compiling and installing header"
  cd "$DIR/$SRCDIR"
  # this screws up the config
  make olddefconfig
  make -j"${JOBS:-8}" 2>&1 | tee build.log
  make -j"${JOBS:-8}" headers_install INSTALL_HDR_PATH="$ROOTFS/usr"
  if [ "$(arch)" = "x86_64" ]; then
    test -f ./arch/x86/boot/bzImage
    install -D ./arch/x86/boot/bzImage "$DIST/rootfs/boot/vmlinuz-$VERSION"
  else
    # new way to do things when moving to 6.14.11
    test -f ./arch/arm64/boot/Image
    install -D ./arch/arm64/boot/Image "$DIST/rootfs/boot/vmlinuz-$VERSION"
    # make -j"${JOBS:-8}" INSTALL_PATH="$DIST/rootfs/boot install"
  fi
}

clear() {
  cd "$DIR"
  rm -rf ./*.tgz ./*.tar.xz "$SRCDIR" "$TARBALL"
}

cd "$DIR"
case "$1" in
  download|d)
    download
    ;;
  extract|e)
    extract
    ;;
  de)
    download && extract
    ;;
  makeinstall|mi)
    makeinstall
    ;;
  clear|clean|c)
    clear
    ;;
  all|a)
    download && extract && makeinstall
    ;;
  *)
    cat <<EOF
Build script for musl-cross-make on macos

download|d -> download the tarball
extract|e -> extract and patch the tarball
de -> download and extract (installs headers)
makeinstall|mi -> make and install the tarball into ../gcc
clear|clean|c -> clean everything except the tarballs (prevent extra downloads)
all|a -> clean, and then go through everything.
EOF
    exit 1
    ;;
esac
