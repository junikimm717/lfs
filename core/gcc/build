#!/bin/sh
set -eux

DIR="$(realpath "$(dirname "$0" )" )"
cd "$DIR"

# You MUST make sure that we are in a correct environment.
test -z "$INOSENV" && {
  echo "You cannot run this script while not in the mimuxenv!" && \
  exit 1;
}

VERSION="14.3.0"
BASEURL="https://dev.mit.junic.kim/pkgs"
SRCDIR="gcc-$VERSION"
TARBALL="$SRCDIR.tar.xz"

BUILDDIR="dist"

download() {
  cd "$DIR"
  echo "downloading gcc source..."
  if test -f "$TARBALL"; then
    echo "$TARBALL exists, skipping..."
    return
  fi

  curl -LOf $BASEURL/$TARBALL
}

extract() {
  cd "$DIR"
  echo "extracting gcc source..."
  if ! test -f "$TARBALL"; then
    echo "No tarball to operate on!"
    exit 1
  fi

  tar xf "$TARBALL"
  cd "$SRCDIR"
  case $(uname -m) in
    x86_64)
      sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
    ;;
    aarch64)
      sed -e 's/lib64/lib/'\
        -i.orig gcc/config/aarch64/t-aarch64-linux
    ;;
  esac
  sed '/thread_header =/s/@.*@/gthr-posix.h/' \
    -i libgcc/Makefile.in libstdc++-v3/include/Makefile.in

  mkdir -p "$DIR/$BUILDDIR" && cd "$DIR/$BUILDDIR"

  # This gcc will be used when we are actually booted into our system.
  # Therefore, its sysroot must be set to /
  "$DIR/$SRCDIR/configure" \
    --prefix="/usr" \
    --target="$TARGET" \
    --libdir=/usr/lib \
    --disable-fixed-point \
    --disable-libquadmath \
    --disable-decimal-float \
    --enable-default-pie \
    --enable-default-ssp \
    --program-prefix= \
    LDFLAGS_FOR_TARGET="-L$PWD/$TARGET/libgcc"\
    --disable-nls \
    --with-sysroot=/ \
    --with-build-sysroot="${ROOTFS:-/}" \
    --enable-libatomic \
    --enable-languages=c,c++ \
    --disable-bootstrap \
    --disable-assembly \
    --disable-werror \
    --disable-multilib \
    --disable-lto \
    --enable-tls \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-gnu-indirect-function \
    --disable-libmpx \
    --enable-shared \
    --enable-initfini-array \
    --enable-libstdcxx-time=rt \
    CC="$CC $CFLAGS -fPIC"\
    CXX="$CXX $CXXFLAGS -fPIC"\
   
}

makeinstall() {
  echo "building gcc..."
  if ! test -d "$DIR/$BUILDDIR" -a -d "$DIR/$SRCDIR"; then
    echo "No source directory to operate on!"
    exit 1
  fi
  cd "$DIR/$BUILDDIR"

  make -j"${JOBS:-8}" all-gcc
  make -j"${JOBS:-8}" all-target-libgcc
  make -j"${JOBS:-8}" all-target-libstdc++-v3 CXXFLAGS="-fPIC"
  make -j"${JOBS:-8}" all-target-libatomic CXXFLAGS="-fPIC"

  make -j"${JOBS:-8}" DESTDIR="$ROOTFS" install-gcc
  make -j"${JOBS:-8}" DESTDIR="$ROOTFS" install-target-libgcc
  make -j"${JOBS:-8}" DESTDIR="$ROOTFS" install-target-libstdc++-v3
  make -j"${JOBS:-8}" DESTDIR="$ROOTFS" install-target-libatomic
  ln -sfn gcc "$ROOTFS/usr/bin/cc"
}

clear() {
  cd "$DIR"
  rm -rf ./*.tgz ./*.tar.xz ./*.tar.bz2 ./*.tar.gz "$SRCDIR" "$TARBALL" "$BUILDDIR"
}

cd "$DIR"
case "$1" in
  download|d)
    download
    ;;
  extract|e)
    extract
    ;;
  makeinstall|mi)
    makeinstall
    ;;
  clear|clean|c)
    clear
    ;;
  all|a)
    download && extract && makeinstall
    ;;
  *)
    cat <<EOF
Build script for gcc

download|d -> download the tarball
extract|e -> extract and patch the tarball
makeinstall|mi -> make and install the build artifacts
clear|clean|c -> clean all artifacts
all|a -> clean, and then go through everything.
EOF
    exit 1
    ;;
esac
