#!/bin/sh

set -eu

# sob perl still refuses to build :/ will be WIP

DIR="$(realpath "$(dirname "$0" )" )"
cd "$DIR"

# You MUST make sure that we are in a correct environment.
test -z "$INOSENV" && {
  echo "You cannot run this script while not in the mimuxenv!" && \
  exit 1;
}

VERSION="5.40.2"
BASEURL=https://www.cpan.org/src/5.0
SRCDIR="perl-$VERSION"
TARBALL="$SRCDIR.tar.xz"

MAKEFILE=skibidi.Makefile

export CPP="$CPP -nostdinc"
export CFLAGS="$CFLAGS -nostdinc"

download() {
  cd "$DIR"
  echo "downloading perl source..."
  if test -f "$TARBALL"; then
    echo "$TARBALL exists, skipping..."
  else
    curl -LOf $BASEURL/$TARBALL
  fi
}

extract() {
  cd "$DIR"
  echo "extracting perl source..."
  if ! test -f "$TARBALL"; then
    echo "No tarball to operate on!"
    exit 1
  fi

  tar xf "$TARBALL"
  #tar --strip-components=1 -zxf perl-cross-1.6.2.tar.gz -C "$SRCDIR"
  chmod -R u+w "$SRCDIR"
  cd "$SRCDIR"
  # another line that requires uncommenting AND THEN commenting
  if ! test -z "${PATCH:-}" ; then
    sed -i \
      -e "s/Makefile=Makefile/Makefile=$MAKEFILE/g"\
      -e '1a\# vim:ft=sh'\
      -e "s/\$(MAKE) depend MAKEDEPEND=/\$(MAKE) -f $MAKEFILE depend MAKEDEPEND=:/g"\
      Makefile.SH
  fi
  ./Configure -des -Dprefix=/usr \
    -Dcflags="$CFLAGS $LDFLAGS" \
    -Dprefix=/usr \
    -Dvendorprefix=/usr \
    -Dman1dir=/usr/share/man/man1 \
    -Dman3dir=/usr/share/man/man3 \
    -Dsitelib=/usr/lib/perl5/site_perl \
    -Dvendorlib=/usr/lib/perl5/vendor_perl \
    -Dprivlib=/usr/lib/perl5/core_perl \
    -Darchlib=/usr/lib/perl5/core_perl \
    -Dsitearch=/usr/lib/perl5/site_perl \
    -Dvendorarch=/usr/lib/perl5/vendor_perl \
    -Dlocincpth=" " -Dloclibpth=" " \
    -Dcf_by="mimux" \
    -Dusedevel \
    -Dvendorprefix=/usr
  echo 'd_eaccess=undef' >> ./config.sh
  echo 'usrinc=' >> ./config.sh
  echo "d_uselocale='undef'" >> config.sh
  echo '#undef HAS_EACCESS' >> ./config.h
  # a line that needs to be uncommented, AND THEN commented
  if ! test -z "${PATCH:-}" ; then
    sed -i \
    echo "firstmakefile=$MAKEFILE" >> ./config.sh
  fi
  cp "$DIR/write_buildcustomize.pl" .
  cp "$DIR/makedepend" .

  # I sure HOPE this stupid timestamp bullshit will work.
  find . -type f -exec touch {} +
  #find "$ROOTFS" -type f -exec touch -d '1 hour later' {} +
}

makeinstall() {
  echo "building perl..."
  
  if ! test -d "$DIR/$SRCDIR"; then
    echo "No source directory to operate on!"
    exit 1
  fi
  cd "$DIR/$SRCDIR"
  export INSTALLSITELIB=$ROOTFS/usr/lib/perl5/site_perl
  export INSTALLSITEARCH=$ROOTFS/usr/lib/perl5/site_perl/arch
  export INSTALLSITEMAN1DIR=$ROOTFS/usr/share/man/man1

  if ! test -z "${PATCH:-}" ; then
    # This WILL fail. That is FINE.
    echo "==========================make first==========================="
    make -f $MAKEFILE -j${JOBS:-8} || true
  else
    sed \
      -e "s|CROSS_ROOT|$CROSS_ROOT|g"\
      "$DIR/skibidi_template.Makefile"\
      > "$MAKEFILE"
    echo "==========================make running==========================="
    make -f $MAKEFILE -j${JOBS:-8}
    echo "==========================make Install==========================="
    make -f $MAKEFILE -j${JOBS:-8} DESTDIR=$ROOTFS install
    mkdir -p "$ROOTFS/usr/lib/perl5/core_perl/"

    find ./lib -type f | grep -E '\.t$' | xargs rm
    rsync -a --no-o --no-g --exclude='*.t' ./lib/ "$ROOTFS/usr/lib/perl5/core_perl/"
    for file in perl perlbug perldoc perlivp perlthanks; do
      ln -sfn "$file$VERSION" "$ROOTFS/usr/bin/$file"
    done
  fi
}

clear() {
  cd "$DIR"
  rm -rf ./*.tgz ./*.tar.xz ./*.tar.bz2 ./*.tar.gz "$SRCDIR" "$TARBALL"
}

cd "$DIR"
case "$1" in
  download|d)
    download
    ;;
  extract|e)
    extract
    ;;
  makeinstall|mi)
    makeinstall
    ;;
  clear|clean|c)
    clear
    ;;
  all|a)
    # I can't fucking believe this.
    download
    export PATCH=1
    extract && makeinstall
    export PATCH=
    extract && makeinstall
    ;;
  *)
    cat <<EOF
Build script for perl

download|d -> download the tarball
extract|e -> extract and patch the tarball
makeinstall|mi -> make and install the build artifacts
clear|clean|c -> clean all artifacts
all|a -> clean, and then go through everything.
EOF
    exit 1
    ;;
esac
